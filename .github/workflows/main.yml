# This is a basic workflow to help you get started with the Run Jtest action.
name: Jtest with Maven

on:
  # Trigger the workflow on push or pull request events but only for the master branch.
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  build:
    name: Analyze project with Jtest
    
    # Specifies the type of runner that the job will run on.
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
    - name: Clone
      uses: actions/checkout@v2
      
    # Generates the jtest.data.json input file.
    - name: Create input for Jtest
      run: mvn clean install jtest:jtest -DskipTests=true

    # Runs code analysis with Jtest
    - name: Run Jtest
      id: jtest
      uses: parasoft/run-jtest-action@0.0.2
      with:
        #Uses the jtest.data.json generated with the Maven command in the previous step
        input: target/jtest/jtest.data.json
        installDir: C:\JtestInstall\jtest_2021.1
        reportFormat: xml,html,custom
        additionalParams: '-property report.custom.extension=sarif -property report.custom.xsl.file=${PARASOFT_SARIF_XSL}'

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results (SARIF)
      if: always()
      uses: github/codeql-action/upload-sarif@v1
      with:
        sarif_file: reports/report.sarif # reports is a default location for reports directory

    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Static analysis reports
        path: reports/*.*
