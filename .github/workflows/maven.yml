# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: build only
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml -Dmaven.test.failure.ignore=true
      
  static_analysis:
    name: jtest analysis
    needs: build
  
    runs-on: self-hosted
    
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so that your job can access it.
    - name: Checkout repository
      uses: actions/checkout@v3
    
    # Generates the jtest.data.json input file.
    - name: Create input for Jtest
      run: mvn clean install jtest:jtest "-DskipTests=true -Djtest.skip=true"

    # Runs code analysis with Jtest
    - name: Run Jtest
      id: jtest
      uses: parasoft/run-jtest-action@1.0.0
      with:
        #Uses the jtest.data.json generated with the Maven command in the previous step
        input: build/jtest/jtest.data.json

    # Uploads analysis results in the SARIF format, so that they are displayed as GitHub code scanning alerts.
    - name: Upload results SARIF
      if: always()
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: reports/report.sarif # reports is a default location for reports directory

    # Uploads an archive that includes all report files (.xml, .html, .sarif).
    - name: Archive reports
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: Static analysis reports
        path: reports/*.*
